{"version":3,"sources":["routes/api/getApiUri.ts","routes/components/header.tsx","routes/main/home.tsx","routes/main/login.tsx","routes/util/notfound.tsx","routes/util/logout.tsx","routes/post/post.tsx","routes/main/register.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["baseURL","Header","state","isLogin","checkIsLogin","a","localStorage","getItem","setState","queryHeader","publicIp","v4","queryBody","publicip","fetch","apiUri","method","body","JSON","stringify","headers","then","res","json","data","userid","setItem","sessionStorage","this","loginLoginBar","className","href","unloginLoginBar","Component","Home","props","document","title","Login","isHinder","id","password","errorMessage","handleHinder","handleLogin","uid","token","toString","window","location","replace","message","handleChange","e","target","name","value","handleEnterKey","keyCode","InputGroup","FormControl","placeholder","type","size","onChange","onKeyDown","Append","Button","onClick","style","color","Notfound","Logout","removeItem","Spinner","marginTop","marginBottom","animation","Post","Register","passwordCheck","nickname","email","isLoading","formErrors","verifyForm","length","handleOverlap","passwordRegex","RegExp","test","handleRegister","alert","status","content","overlap","variant","disabled","App","exact","path","component","React","Boolean","hostname","match","require","config","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uUAKeA,EAFT,yB,iBCmFSC,E,2MA9EbC,MAAQ,CACNC,SAAS,G,EAGXC,a,sBAAe,8BAAAC,EAAA,yDACRC,aAAaC,QAAQ,SADb,uBAEX,EAAKC,SAAS,CAAEL,SAAS,IAFd,iCAMPM,EAAmB,CACvB,eAAgB,mBAChB,iBAAkBH,aAAaC,QAAQ,UAAY,QARxC,SAYKG,IAASC,KAZd,0BAWPC,EAXO,CAYXC,SAZW,gBAeDC,MAAMC,EAAS,eAAgB,CACzCC,OAAQ,OACRC,KAAMC,KAAKC,UAAUP,GACrBQ,QAASX,IAERY,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,IAAKA,EAAKC,OAGR,OAFAnB,aAAaoB,QAAQ,QAAS,SAC9BC,eAAeD,QAAQ,SAAU,IAGnC,EAAKlB,SAAS,CAAEL,SAAS,IACzBwB,eAAeD,QAAQ,SAAUF,EAAKC,WA5B7B,4C,mFAiCbG,KAAKxB,iB,+BAIL,IAAMyB,EACJ,8BACE,uBAAGC,UAAU,qBAAqBC,KAAK,aAAvC,YAGA,uBAAGD,UAAU,qBAAqBC,KAAK,UAAvC,UAKEC,EACJ,8BACE,uBAAGF,UAAU,qBAAqBC,KAAK,WAAvC,UAGA,uBAAGD,UAAU,qBAAqBC,KAAK,WAAvC,YAKJ,OACE,oCACE,yBAAKD,UAAU,qBACb,6BACE,uBAAGA,UAAU,kBAAkBC,KAAK,KAApC,WAIEH,KAAK1B,MAAMC,QAA0B6B,EAAhBH,GAEzB,mC,GAxEWI,aCFAC,E,YACnB,WAAYC,GAAa,IAAD,6BACtB,4CAAMA,IACNC,SAASC,MAAQ,aAFK,E,oHAWtB,OACE,kBAAC,WAAD,KACE,yBAAKP,UAAU,gBACb,6BACE,uBAAGA,UAAU,gBACb,uBAAGA,UAAU,eAAb,qDACA,uBAAGA,UAAU,yBAAb,WACA,uBAAGA,UAAU,yBAAb,yGAIF,oC,GAvBwBG,a,gCCGbK,E,2MACnBpC,MAAQ,CACNqC,UAAU,EACVC,GAAI,GACJC,SAAU,GACVC,aAAc,I,EAGhBC,aAAe,WACb,EAAKnC,SAAS,CAAE+B,UAAW,EAAKrC,MAAMqC,Y,EAGxCK,Y,sBAAc,8BAAAvC,EAAA,kEAEL,EAAKH,MAAMsC,GAFN,KAGA,EAAKtC,MAAMuC,SAHX,SAIM/B,IAASC,KAJf,mBACNC,EADM,CAEViC,IAFU,KAGVJ,SAHU,KAIV5B,SAJU,MAMNJ,EAAmB,CACvB,eAAgB,oBAElBK,MAAMC,EAAS,SAAU,CACvBC,OAAQ,OACRC,KAAMC,KAAKC,UAAUP,GACrBQ,QAASX,IAERY,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACCA,EAAKsB,OAOVxC,aAAaoB,QAAQ,QAASF,EAAKsB,MAAMC,YACzCC,OAAOC,SAASC,QAAQ,MANtB,EAAK1C,SAAS,CAAEkC,aAAclB,EAAK2B,aAlB7B,2C,EA4BdC,aAAe,SAACC,GAAY,IAAD,EACzB,EAAK7C,UAAL,mBACG6C,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,OAD5B,6BAEgB,IAFhB,K,EAMFC,eAAiB,SAACJ,GACE,KAAdA,EAAEK,SACJ,EAAKd,e,wEAKP,OACE,kBAAC,WAAD,KACE,yBAAKd,UAAU,gBACb,uBAAGA,UAAU,gBACb,uBAAGA,UAAU,wBAAb,SACA,uBAAGA,UAAU,iBACb,yBAAKA,UAAU,uBACb,kBAAC6B,EAAA,EAAD,KAIE,kBAACC,EAAA,EAAD,CACEC,YAAY,KACZC,KAAK,OACLC,KAAK,KACLP,MAAO5B,KAAK1B,MAAMsC,GAClBwB,SAAUpC,KAAKwB,aACfa,UAAWrC,KAAK6B,eAChBF,KAAK,QAGT,yBAAKzB,UAAU,kBACf,kBAAC6B,EAAA,EAAD,KAIE,kBAACC,EAAA,EAAD,CACEC,YAAY,WACZC,KAAMlC,KAAK1B,MAAMqC,SAAW,WAAa,OACzCwB,KAAK,KACLP,MAAO5B,KAAK1B,MAAMuC,SAClBuB,SAAUpC,KAAKwB,aACfa,UAAWrC,KAAK6B,eAChBF,KAAK,aAEP,kBAACI,EAAA,EAAWO,OAAZ,KACE,kBAACC,EAAA,EAAD,CAAQC,QAASxC,KAAKe,cACnBf,KAAK1B,MAAMqC,SAAW,qBAAQ,yBAKvC,uBAAGT,UAAU,iBACZF,KAAK1B,MAAMwC,aACV,0BAAMZ,UAAU,uBACbF,KAAK1B,MAAMwC,cAGd,0BAAM2B,MAAO,CAAEC,MAAO,UAAtB,QAEF,yBAAKxC,UAAU,sBACb,uBAAGA,UAAU,gBAAgBsC,QAASxC,KAAKgB,aACzC,+C,GA1GqBX,aCiBpBsC,E,iLAnBX,OACE,oCACE,yBAAKzC,UAAU,sCACb,6BACE,uBAAGA,UAAU,wBACb,uBAAGA,UAAU,mBAAb,gBAEF,uBAAGA,UAAU,wBACb,uBAAGA,UAAU,eAAb,cACA,yBAAKA,UAAU,eACf,uBAAGA,UAAU,eACX,8G,GAbWG,a,QCsBRuC,E,4LAnBXlE,aAAamE,WAAW,SACxB9C,eAAe8C,WAAW,UAC1BzB,OAAOC,SAASC,QAAQ,O,+BAGxB,OACE,oCACE,yBAAKpB,UAAU,gBACb,kBAAC4C,EAAA,EAAD,CACEL,MAAO,CAAEM,UAAW,QAASC,aAAc,QAC3CC,UAAU,WAEZ,mD,GAdW5C,aCDA6C,E,iLAEjB,OACE,6BACE,yC,GAJ0B7C,a,6jBCCb8C,E,2MACnB7E,MAAQ,CACNsC,GAAI,GACJC,SAAU,GACVuC,cAAe,GACfC,SAAU,GACVC,MAAO,GACPC,WAAW,EACXC,WAAY,CAAE5C,GAAI,GAAIC,SAAU,GAAIwC,SAAU,GAAIC,MAAO,K,EAG3D9B,a,uCAAe,WAAOC,GAAP,eAAAhD,EAAA,6DACPiD,EAASD,EAAEC,OADJ,SAEP,EAAK9C,SAAL,eACH8C,EAAOC,KAAOF,EAAEC,OAAOE,QAHb,OAKb,EAAK6B,WAAW/B,GALH,2C,wDAQf+B,WAAa,SAAC/B,GACZ,OAAQA,EAAOC,MACb,IAAK,KACH,OAAID,EAAOE,MAAM8B,OAAS,OACxB,EAAK9E,SAAS,CACZ4E,WAAW,EAAD,GACL,EAAKlF,MAAMkF,WADN,CAER5C,GAAI,iGAMV,EAAKhC,SAAS,CACZ4E,WAAW,EAAD,GACL,EAAKlF,MAAMkF,WADN,CAER5C,GAAI,YAGR,EAAK+C,cAAcjC,IAGrB,IAAK,WACL,IAAK,gBACH,IAAMkC,EAAgB,IAAIC,OACxB,yCAEF,MAAoB,aAAhBnC,EAAOC,MAAwBiC,EAAcE,KAAKpC,EAAOE,OASzD,EAAKtD,MAAMuC,WAAa,EAAKvC,MAAM8E,mBACrC,EAAKxE,SAAS,CACZ4E,WAAW,EAAD,GACL,EAAKlF,MAAMkF,WADN,CAER3C,SAAU,6FAKhB,EAAKjC,SAAS,CACZ4E,WAAW,EAAD,GACL,EAAKlF,MAAMkF,WADN,CAER3C,SAAU,YApBZ,EAAKjC,SAAS,CACZ4E,WAAW,EAAD,GACL,EAAKlF,MAAMkF,WADN,CAER3C,SAAU,gIAqBlB,IAAK,WACH,EAAK8C,cAAcjC,GACnB,MACF,IAAK,QAIH,IAHmB,IAAImC,OACrB,4MAEcC,KAAK,EAAKxF,MAAMgF,OAAQ,CACtC,EAAK1E,SAAS,CACZ4E,WAAW,EAAD,GACL,EAAKlF,MAAMkF,WADN,CAERF,MAAO,wFAGX,MAEF,EAAK1E,SAAS,CACZ4E,WAAW,EAAD,GACL,EAAKlF,MAAMkF,WADN,CAERF,MAAO,OAGX,EAAKK,cAAcjC,GACnB,MAEF,QACE,S,EAINqC,eAAiB,WAEf,GADA,EAAKnF,SAAS,CAAE2E,WAAW,IAEzB,EAAKjF,MAAMkF,WAAWF,OACtB,EAAKhF,MAAMkF,WAAW5C,IACtB,EAAKtC,MAAMkF,WAAWH,UACtB,EAAK/E,MAAMkF,WAAW3C,SAItB,OAFAmD,MAAM,wGACN,EAAKpF,SAAS,CAAE2E,WAAW,IAG7B,IACG,EAAKjF,MAAMgF,QACX,EAAKhF,MAAMsC,KACX,EAAKtC,MAAM+E,WACX,EAAK/E,MAAMuC,SAIZ,OAFAmD,MAAM,8EACN,EAAKpF,SAAS,CAAE2E,WAAW,IAG7B,IAAMvE,EAAiB,CACrBiC,IAAK,EAAK3C,MAAMsC,GAChBC,SAAU,EAAKvC,MAAMuC,SACrBwC,SAAU,EAAK/E,MAAM+E,SACrBC,MAAO,EAAKhF,MAAMgF,OAKpBpE,MAAMC,EAAS,SAAU,CACvBC,OAAQ,OACRC,KAAMC,KAAKC,UAAUP,GACrBQ,QANuB,CACvB,eAAgB,sBAOfC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,OAAQA,EAAKqE,QACX,KAAK,IAGH,OAFAD,MAAM,eAAiBpE,EAAK2B,cAC5B,EAAK3C,SAAS,CAAE2E,WAAW,IAE7B,KAAK,IAUH,OATAS,MAAM,eAAiBpE,EAAK2B,cAC5B,EAAK3C,SAAS,CACZ2E,WAAW,EACXC,WAAW,EAAD,GACL,EAAKlF,MAAMkF,WADN,CAER5C,GAAI,gFAENA,GAAI,KAGR,KAAK,IAGH,OAFAoD,MAAM,eAAiBpE,EAAK2B,cAC5B,EAAK3C,SAAS,CAAE2E,WAAW,IAG/B,IAAmB,IAAf3D,EAAKtB,MAGP,OAFA0F,MAAM,6EACN5C,OAAOC,SAASC,QAAQ,c,EAMhCqC,cAAgB,SAACjC,GACf,IAAM1C,EAAiB,CACrBkD,KAAMR,EAAOC,KACbuC,QAASxC,EAAOE,OAKlB1C,MAAMC,EAAS,iBAAkB,CAC/BC,OAAQ,OACRC,KAAMC,KAAKC,UAAUP,GACrBQ,QANuB,CACvB,eAAgB,sBAOfC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACgB,MAAhBA,EAAKqE,QACPD,MAAM,kBAAoBpE,EAAK2B,UAEZ,IAAjB3B,EAAKuE,QAST,EAAKvF,SAAS,CACZ4E,WAAW,EAAD,GACL,EAAKlF,MAAMkF,WADN,eAEP9B,EAAOC,KAAO,OAXjB,EAAK/C,SAAS,CACZ4E,WAAW,EAAD,GACL,EAAKlF,MAAMkF,WADN,eAEP9B,EAAOC,KAAO,6D,wEAiBzB,OACE,oCACE,yBAAKzB,UAAU,gBACb,yBAAKA,UAAU,gBACf,uBAAGA,UAAU,wBAAb,YACA,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,gBACb,kBAAC8B,EAAA,EAAD,CACEC,YAAY,KACZC,KAAK,KACLC,KAAK,KACLP,MAAO5B,KAAK1B,MAAMsC,GAClBwB,SAAUpC,KAAKwB,aACfG,KAAK,OAEP,yBAAKzB,UAAU,kBACdF,KAAK1B,MAAMkF,WAAW5C,GACrB,0BAAMV,UAAU,uBACbF,KAAK1B,MAAMkF,WAAW5C,IAGzB,0BAAM6B,MAAO,CAAEC,MAAO,UAAtB,QAEF,yBAAKxC,UAAU,kBACf,kBAAC8B,EAAA,EAAD,CACEC,YAAY,WACZC,KAAK,WACLC,KAAK,KACLP,MAAO5B,KAAK1B,MAAMuC,SAClBuB,SAAUpC,KAAKwB,aACfG,KAAK,aAEP,yBAAKzB,UAAU,kBACf,kBAAC8B,EAAA,EAAD,CACEC,YAAY,kBACZC,KAAK,WACLC,KAAK,KACLP,MAAO5B,KAAK1B,MAAM8E,cAClBhB,SAAUpC,KAAKwB,aACfG,KAAK,kBAEP,yBAAKzB,UAAU,kBACdF,KAAK1B,MAAMkF,WAAW3C,SACrB,0BAAMX,UAAU,uBACbF,KAAK1B,MAAMkF,WAAW3C,UAGzB,0BAAM4B,MAAO,CAAEC,MAAO,UAAtB,QAEF,yBAAKxC,UAAU,kBACf,kBAAC8B,EAAA,EAAD,CACEC,YAAY,WACZC,KAAK,OACLC,KAAK,KACLP,MAAO5B,KAAK1B,MAAM+E,SAClBjB,SAAUpC,KAAKwB,aACfG,KAAK,aAEP,yBAAKzB,UAAU,kBACdF,KAAK1B,MAAMkF,WAAWH,SACrB,0BAAMnD,UAAU,uBACbF,KAAK1B,MAAMkF,WAAWH,UAGzB,0BAAMZ,MAAO,CAAEC,MAAO,UAAtB,QAEF,yBAAKxC,UAAU,kBACf,kBAAC8B,EAAA,EAAD,CACEC,YAAY,QACZC,KAAK,QACLC,KAAK,KACLP,MAAO5B,KAAK1B,MAAMgF,MAClBlB,SAAUpC,KAAKwB,aACfG,KAAK,UAEP,yBAAKzB,UAAU,kBACdF,KAAK1B,MAAMkF,WAAWF,MACrB,0BAAMpD,UAAU,uBACbF,KAAK1B,MAAMkF,WAAWF,OAGzB,0BAAMb,MAAO,CAAEC,MAAO,UAAtB,QAEF,yBAAKxC,UAAU,kBACf,kBAACqC,EAAA,EAAD,CACEJ,KAAK,KACLiC,QAAQ,UACR5B,QAASxC,KAAK+D,eACdM,SAAUrE,KAAK1B,MAAMiF,WAEnBvD,KAAK1B,MAAMiF,UAAsB,aAAV,oC,GAzSDlD,aCsCvBiE,E,YA1Bb,WAAY/D,GAAa,IAAD,6BACtB,4CAAMA,IACNC,SAASC,MAAQ,2CAFK,E,sEAKtB,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8D,OAAK,EAACC,KAAK,IAAIC,UAAWnE,IACjC,kBAAC,IAAD,CAAOiE,OAAK,EAACC,KAAK,SAASC,UAAW/D,IACtC,kBAAC,IAAD,CAAO6D,OAAK,EAACC,KAAK,UAAUC,UAAW7B,IACvC,kBAAC,IAAD,CAAO2B,OAAK,EAACC,KAAK,QAAQC,UAAWvB,IACrC,kBAAC,IAAD,CAAOqB,OAAK,EAACC,KAAK,YAAYC,UAAWtB,IACzC,kBAAC,IAAD,CAAOsB,UAAW9B,KAEpB,yBAAKzC,UAAU,c,GApBPwE,IAAMrE,WCJJsE,QACW,cAA7BvD,OAAOC,SAASuD,UAEe,UAA7BxD,OAAOC,SAASuD,UAEhBxD,OAAOC,SAASuD,SAASC,MACvB,2DCbNC,EAAQ,IAAUC,SAClBC,IAASC,OAAO,kBAAC,EAAD,MAASzE,SAAS0E,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5F,MAAK,SAAA6F,GACjCA,EAAaC,kB","file":"static/js/main.bfbf5a1c.chunk.js","sourcesContent":["export const baseURL =\n  process.env.NODE_ENV === 'development'\n    ? 'http://localhost:4000'\n    : 'https://api.dodoli.net';\n\nexport default baseURL;\n","import React, { Component } from 'react';\nimport apiUri from '../api/getApiUri';\n\nimport publicIp from 'public-ip';\n\nimport '../../styles/index.scss';\n\nclass Header extends Component {\n  state = {\n    isLogin: false\n  };\n\n  checkIsLogin = async () => {\n    if (!localStorage.getItem('token')) {\n      this.setState({ isLogin: false });\n      return;\n    }\n\n    const queryHeader: any = {\n      'Content-Type': 'application/json',\n      'x-access-token': localStorage.getItem('token') || 'null'\n    };\n\n    const queryBody: any = {\n      publicip: await publicIp.v4()\n    };\n\n    await await fetch(apiUri + '/auth/verify', {\n      method: 'POST',\n      body: JSON.stringify(queryBody),\n      headers: queryHeader\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (!data.userid) {\n          localStorage.setItem('token', '');\n          sessionStorage.setItem('userid', '');\n          return;\n        }\n        this.setState({ isLogin: true });\n        sessionStorage.setItem('userid', data.userid);\n      });\n  };\n\n  componentDidMount() {\n    this.checkIsLogin();\n  }\n\n  render() {\n    const loginLoginBar = (\n      <span>\n        <a className=\"Module-loginbutton\" href=\"/register\">\n          Register\n        </a>\n        <a className=\"Module-loginbutton\" href=\"/login\">\n          Login\n        </a>\n      </span>\n    );\n    const unloginLoginBar = (\n      <span>\n        <a className=\"Module-loginbutton\" href=\"/logout\">\n          Logout\n        </a>\n        <a className=\"Module-loginbutton\" href=\"/mypage\">\n          My page\n        </a>\n      </span>\n    );\n    return (\n      <>\n        <div className=\"Background-header\">\n          <div>\n            <a className=\"Module-mainlogo\" href=\"/\">\n              dodol:i\n            </a>\n\n            {!this.state.isLogin ? loginLoginBar : unloginLoginBar}\n          </div>\n          <br />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component, Fragment } from 'react';\n\nimport '../../styles/index.scss';\nimport { string, bool } from 'prop-types';\n\nexport default class Home extends Component {\n  constructor(props: any) {\n    super(props);\n    document.title = 'dodoli.net';\n  }\n  componentWillMount() {\n    let login: any = false;\n\n    if (login === false) {\n    }\n  }\n  render() {\n    return (\n      <Fragment>\n        <div className=\"Style-center\">\n          <div>\n            <p className=\"Blank-small\" />\n            <p className=\"Text-medium\">하루를 되돌아봐요</p>\n            <p className=\"Text-xlarge Text-bold\">dodol:i</p>\n            <p className=\"Text-small Text-light\">\n              여기에는 아마 사진이 들어갈 것입니다\n            </p>\n          </div>\n          <div></div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n","import React, { Component, Fragment, KeyboardEvent } from 'react';\nimport { Form, Button, InputGroup, FormControl } from 'react-bootstrap';\n\nimport apiUri from '../api/getApiUri';\n\nimport '../../styles/index.scss';\nimport publicIp from 'public-ip';\n\nexport default class Login extends Component {\n  state = {\n    isHinder: true,\n    id: '',\n    password: '',\n    errorMessage: ''\n  };\n\n  handleHinder = () => {\n    this.setState({ isHinder: !this.state.isHinder });\n  };\n\n  handleLogin = async () => {\n    const queryBody: any = {\n      uid: this.state.id,\n      password: this.state.password,\n      publicip: await publicIp.v4()\n    };\n    const queryHeader: any = {\n      'Content-Type': 'application/json'\n    };\n    fetch(apiUri + '/auth/', {\n      method: 'POST',\n      body: JSON.stringify(queryBody),\n      headers: queryHeader\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (!data.token) {\n          // loginfail\n          this.setState({ errorMessage: data.message });\n          return;\n        }\n\n        // loginsuccess\n        localStorage.setItem('token', data.token.toString());\n        window.location.replace('/');\n      });\n  };\n\n  handleChange = (e: any) => {\n    this.setState({\n      [e.target.name]: e.target.value,\n      errorMessage: ''\n    });\n  };\n\n  handleEnterKey = (e: any) => {\n    if (e.keyCode === 13) {\n      this.handleLogin();\n    }\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"Style-center\">\n          <p className=\"Blank-small\" />\n          <p className=\"Text-large Text-bold\">Login</p>\n          <p className=\"Blank-xsmall\" />\n          <div className=\"Module-input w-auto\">\n            <InputGroup>\n              {/* <InputGroup.Prepend>\n                <InputGroup.Text>ID</InputGroup.Text>\n              </InputGroup.Prepend> */}\n              <FormControl\n                placeholder=\"ID\"\n                type=\"text\"\n                size=\"lg\"\n                value={this.state.id}\n                onChange={this.handleChange}\n                onKeyDown={this.handleEnterKey}\n                name=\"id\"\n              />\n            </InputGroup>\n            <div className=\"Blank-xxsmall\" />\n            <InputGroup>\n              {/* <InputGroup.Prepend>\n                <InputGroup.Text>Password</InputGroup.Text>\n              </InputGroup.Prepend> */}\n              <FormControl\n                placeholder=\"Password\"\n                type={this.state.isHinder ? 'password' : 'text'}\n                size=\"lg\"\n                value={this.state.password}\n                onChange={this.handleChange}\n                onKeyDown={this.handleEnterKey}\n                name=\"password\"\n              />\n              <InputGroup.Append>\n                <Button onClick={this.handleHinder}>\n                  {this.state.isHinder ? '보이기' : '숨기기'}\n                </Button>\n              </InputGroup.Append>\n            </InputGroup>\n          </div>\n          <p className=\"Blank-xsmall\" />\n          {this.state.errorMessage ? (\n            <span className=\"Module-errormessage\">\n              {this.state.errorMessage}\n            </span>\n          ) : (\n            <span style={{ color: 'white' }}>&nbsp;</span>\n          )}\n          <div className=\"Module-buttonstyle\">\n            <p className=\"Module-button\" onClick={this.handleLogin}>\n              <span>Login</span>\n            </p>\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n","import React, { Component, Fragment } from 'react';\n\nimport '../../styles/index.scss';\n\nclass Notfound extends Component {\n  render() {\n    return (\n      <>\n        <div className=\"Style-center Style-overflow-hidden\">\n          <div>\n            <p className=\"Module-notfoundmove\" />\n            <p className=\"Module-notfound\">&nbsp;404&nbsp;</p>\n          </div>\n          <p className=\"Module-notfoundmove\" />\n          <p className=\"Text-medium\"> Not found</p>\n          <div className=\"Module-not\" />\n          <p className=\"Text-xsmall\">\n            <code>무엇을 찾아 헤메던 것일까</code>\n          </p>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Notfound;\n","import React, { Component } from 'react';\nimport { Spinner } from 'react-bootstrap';\n\nimport '../../styles/index.scss';\n\nclass Logout extends Component {\n  componentDidMount() {\n    localStorage.removeItem('token');\n    sessionStorage.removeItem('userid');\n    window.location.replace('/');\n  }\n  render() {\n    return (\n      <>\n        <div className=\"Style-center\">\n          <Spinner\n            style={{ marginTop: '10rem', marginBottom: '3rem' }}\n            animation=\"border\"\n          />\n          <h3>Logging out..</h3>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Logout;\n","import React, { Component } from 'react';\n\nimport PostArg from './PostArg';\n\nexport default class Post extends Component {\n  render() {\n    return (\n      <div>\n        <div>div</div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Button, InputGroup, FormControl } from 'react-bootstrap';\nimport apiUri from '../api/getApiUri';\n\nimport '../../styles/index.scss';\nexport default class Register extends Component {\n  state = {\n    id: '',\n    password: '',\n    passwordCheck: '',\n    nickname: '',\n    email: '',\n    isLoading: false,\n    formErrors: { id: '', password: '', nickname: '', email: '' }\n  };\n\n  handleChange = async (e: any) => {\n    const target = e.target;\n    await this.setState({\n      [target.name]: e.target.value\n    });\n    this.verifyForm(target);\n  };\n\n  verifyForm = (target: any) => {\n    switch (target.name) {\n      case 'id':\n        if (target.value.length < 4) {\n          this.setState({\n            formErrors: {\n              ...this.state.formErrors,\n              id: '아이디는 4글자 이상이어야 합니다.'\n            }\n          });\n          //this.state.formErrors.id = 'test';\n          return;\n        }\n        this.setState({\n          formErrors: {\n            ...this.state.formErrors,\n            id: ''\n          }\n        });\n        this.handleOverlap(target);\n        return;\n\n      case 'password':\n      case 'passwordCheck':\n        const passwordRegex = new RegExp(\n          /^((?=\\S*?[a-z])(?=\\S*?[0-9]).{5,})\\S$/\n        );\n        if (target.name === 'password' && !passwordRegex.test(target.value)) {\n          this.setState({\n            formErrors: {\n              ...this.state.formErrors,\n              password: '영문과 숫자를 포함한 6글자 이상이어야 합니다.'\n            }\n          });\n          return;\n        }\n        if (this.state.password !== this.state.passwordCheck) {\n          this.setState({\n            formErrors: {\n              ...this.state.formErrors,\n              password: '비밀번호가 일치하지 않습니다.'\n            }\n          });\n          return;\n        }\n        this.setState({\n          formErrors: {\n            ...this.state.formErrors,\n            password: ''\n          }\n        });\n        return;\n      case 'nickname':\n        this.handleOverlap(target);\n        break;\n      case 'email':\n        const emailRegex = new RegExp(\n          /^(?:[a-zA-Z0-9])([-_0-9a-zA-Z]+(\\.[-_0-9a-zA-Z]+)*|^\\\"([\\001-\\010\\013\\014\\016-\\037!#-\\[\\]-\\177]|\\\\[\\001-011\\013\\014\\016-\\177])*\\\")@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,6}\\.?$/\n        );\n        if (!emailRegex.test(this.state.email)) {\n          this.setState({\n            formErrors: {\n              ...this.state.formErrors,\n              email: '정확한 이메일을 입력해주세요.'\n            }\n          });\n          break;\n        }\n        this.setState({\n          formErrors: {\n            ...this.state.formErrors,\n            email: ''\n          }\n        });\n        this.handleOverlap(target);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  handleRegister = () => {\n    this.setState({ isLoading: true });\n    if (\n      this.state.formErrors.email ||\n      this.state.formErrors.id ||\n      this.state.formErrors.nickname ||\n      this.state.formErrors.password\n    ) {\n      alert('잘못 입력된 정보를 다시 확인하세요.');\n      this.setState({ isLoading: false });\n      return;\n    }\n    if (\n      !this.state.email ||\n      !this.state.id ||\n      !this.state.nickname ||\n      !this.state.password\n    ) {\n      alert('비어있는 정보가 있습니다.');\n      this.setState({ isLoading: false });\n      return;\n    }\n    const queryBody: any = {\n      uid: this.state.id,\n      password: this.state.password,\n      nickname: this.state.nickname,\n      email: this.state.email\n    };\n    const queryHeader: any = {\n      'Content-Type': 'application/json'\n    };\n    fetch(apiUri + '/user/', {\n      method: 'POST',\n      body: JSON.stringify(queryBody),\n      headers: queryHeader\n    })\n      .then(res => res.json())\n      .then(data => {\n        switch (data.status) {\n          case 400:\n            alert('Error 400 : ' + data.message);\n            this.setState({ isLoading: false });\n            return;\n          case 422:\n            alert('Error 422 : ' + data.message);\n            this.setState({\n              isLoading: false,\n              formErrors: {\n                ...this.state.formErrors,\n                id: '다른 아이디로 시도해주세요.'\n              },\n              id: ''\n            });\n            return;\n          case 500:\n            alert('Error 500 : ' + data.message);\n            this.setState({ isLoading: false });\n            return;\n        }\n        if (data.state === true) {\n          alert('회원가입에 성공했습니다.');\n          window.location.replace('/login');\n          return;\n        }\n      });\n  };\n\n  handleOverlap = (target: any) => {\n    const queryBody: any = {\n      type: target.name,\n      content: target.value\n    };\n    const queryHeader: any = {\n      'Content-Type': 'application/json'\n    };\n    fetch(apiUri + '/user/overlap/', {\n      method: 'POST',\n      body: JSON.stringify(queryBody),\n      headers: queryHeader\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (data.status === 400) {\n          alert('Client Error : ' + data.message);\n        }\n        if (data.overlap === true) {\n          this.setState({\n            formErrors: {\n              ...this.state.formErrors,\n              [target.name]: '이미 사용중입니다.'\n            }\n          });\n          return;\n        }\n        this.setState({\n          formErrors: {\n            ...this.state.formErrors,\n            [target.name]: ''\n          }\n        });\n        return;\n      });\n    return;\n  };\n\n  render() {\n    return (\n      <>\n        <div className=\"Style-center\">\n          <div className=\"Blank-small\" />\n          <p className=\"Text-bold Text-large\">Register</p>\n          <div className=\"Blank-xsmall\" />\n          <div className=\"Module-input\">\n            <FormControl\n              placeholder=\"ID\"\n              type=\"id\"\n              size=\"lg\"\n              value={this.state.id}\n              onChange={this.handleChange}\n              name=\"id\"\n            />\n            <div className=\"Blank-xxsmall\" />\n            {this.state.formErrors.id ? (\n              <span className=\"Module-errormessage\">\n                {this.state.formErrors.id}\n              </span>\n            ) : (\n              <span style={{ color: 'white' }}>&nbsp;</span>\n            )}\n            <div className=\"Blank-xxsmall\" />\n            <FormControl\n              placeholder=\"Password\"\n              type=\"password\"\n              size=\"lg\"\n              value={this.state.password}\n              onChange={this.handleChange}\n              name=\"password\"\n            />\n            <div className=\"Blank-xxsmall\" />\n            <FormControl\n              placeholder=\"Verify password\"\n              type=\"password\"\n              size=\"lg\"\n              value={this.state.passwordCheck}\n              onChange={this.handleChange}\n              name=\"passwordCheck\"\n            />\n            <div className=\"Blank-xxsmall\" />\n            {this.state.formErrors.password ? (\n              <span className=\"Module-errormessage\">\n                {this.state.formErrors.password}\n              </span>\n            ) : (\n              <span style={{ color: 'white' }}>&nbsp;</span>\n            )}\n            <div className=\"Blank-xxsmall\" />\n            <FormControl\n              placeholder=\"Nickname\"\n              type=\"name\"\n              size=\"lg\"\n              value={this.state.nickname}\n              onChange={this.handleChange}\n              name=\"nickname\"\n            />\n            <div className=\"Blank-xxsmall\" />\n            {this.state.formErrors.nickname ? (\n              <span className=\"Module-errormessage\">\n                {this.state.formErrors.nickname}\n              </span>\n            ) : (\n              <span style={{ color: 'white' }}>&nbsp;</span>\n            )}\n            <div className=\"Blank-xxsmall\" />\n            <FormControl\n              placeholder=\"Email\"\n              type=\"email\"\n              size=\"lg\"\n              value={this.state.email}\n              onChange={this.handleChange}\n              name=\"email\"\n            />\n            <div className=\"Blank-xxsmall\" />\n            {this.state.formErrors.email ? (\n              <span className=\"Module-errormessage\">\n                {this.state.formErrors.email}\n              </span>\n            ) : (\n              <span style={{ color: 'white' }}>&nbsp;</span>\n            )}\n            <div className=\"Blank-xxsmall\" />\n            <Button\n              size=\"lg\"\n              variant=\"warning\"\n              onClick={this.handleRegister}\n              disabled={this.state.isLoading}\n            >\n              {!this.state.isLoading ? '회원 가입' : 'Loading...'}\n            </Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","import React from 'react';\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Headroom from 'react-headroom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/index.scss';\n\nimport Header from './routes/components/header';\nimport Home from './routes/main/home';\nimport Login from './routes/main/login';\nimport Notfound from './routes/util/notfound';\nimport Logout from './routes/util/logout';\nimport Post from './routes/post/post';\nimport Register from './routes/main/register';\n\nclass App extends React.Component {\n  constructor(props: any) {\n    super(props);\n    document.title = '빈성하세요 - dodol:i';\n  }\n  render() {\n    return (\n      <div>\n        <Headroom>\n          <Header />\n        </Headroom>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/logout\" component={Logout} />\n            <Route exact path=\"/post\" component={Post} />\n            <Route exact path=\"/register\" component={Register} />\n            <Route component={Notfound} />\n          </Switch>\n          <div className=\"App\"></div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nrequire('dotenv').config();\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}